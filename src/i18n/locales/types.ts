// Translation type definitions
export interface Translations {
  [key: string]: string | { [key: string]: string };
  menu: {
    dashboard: string;
    status: string;
    wan: string;
    lan: string;
    wlan: string;
    statistics: string;
    wifiNeighbor: string;
    meshInfo: string;
    lcm: string;
    systemStats: string;
    basicSetting: string;
    wireless: string;
    wanSetting: string;
    lanSetting: string;
    wifi: string;
    guestAccess: string;
    macFilter: string;
    wirelessExtender: string;
    management: string;
    ntp: string;
    ssh: string;
    advanced: string;
    serviceControl: string;
    ddns: string;
    dmz: string;
    device: string;
    diagnostics: string;
    firmware: string;
    reset: string;
    backup: string;
    xperienceControl: string;
    application: string;
    iot: string;
    thread: string;
    matter: string;
  };
  header: {
    account: string;
    logout: string;
  };
  dashboard: {
    system: string;
    softwareVersion: string;
    hardwareVersion: string;
    model: string;
    serialNumber: string;
    cpu: string;
    processes: string;
    memory: string;
    total: string;
    free: string;
    used: string;
    wan: string;
    status: string;
    speed: string;
    received: string;
    sent: string;
    wifi: string;
    clients: string;
    ethernet: string;
    ipv4Address: string;
    ipv6Address: string;
    protocol: string;
    subnetMask: string;
    defaultGateway: string;
    primaryDNS: string;
    secondaryDNS: string;
    macAddress: string;
    password: string;
  };
  wan: {
    title: string;
    operationMode: string;
    sensingPolicy: string;
    sensingTimeout: string;
    wanMode: string;
    interface: string;
    name: string;
    macAddress: string;
    speed: string;
    duplex: string;
    ipv4Address: string;
    status: string;
    wanModeConfig: string;
    dnsMode: string;
    physicalType: string;
    origin: string;
    mode: string;
    address: string;
    gateway: string;
    dnsServer: string;
    subnetMask: string;
    type: string;
    prefix: string;
  };
  lan: {
    title: string;
    macAddress: string;
    mtu: string;
    ipv4: string;
    ipv6: string;
    name: string;
    ipAddress: string;
    netmask: string;
    status: string;
  };
  wlan: {
    title: string;
    channel: string;
    bandwidth: string;
    macAddress: string;
    interface: string;
    name: string;
    alias: string;
    status: string;
    ssid: string;
    authentication: string;
    encryption: string;
    password: string;
    bssid: string;
    auto: string;
    enable: string;
    disable: string;
  };
  statistics: {
    title: string;
    ethernet: string;
    wlan: string;
    port: string;
    rxbytes: string;
    rxpackets: string;
    rxerror: string;
    rxdiscard: string;
    txbytes: string;
    txpackets: string;
    txerror: string;
    txdiscard: string;
  };
  wifiNeighbor: {
    title: string;
    wifiNeighbor: string;
    ssid: string;
    bssid: string;
    channel: string;
    signal: string;
    security: string;
    wirelessMode: string;
    scan: string;
    scanning: string;
  };
  mesh: {
    title: string;
    networkInformation: string;
    nodeList: string;
    clientList: string;
    name: string;
    mode: string;
    ipAddress: string;
    macAddress: string;
    mediaType: string;
    supportedBand: string;
    upstream: string;
    action: string;
    map: string;
    list: string;
    back: string;
    steeringControl: string;
    selectedNode: string;
    destination: string;
    selectDestination: string;
    band: string;
    selectBand: string;
  };
  lcm: {
    title: string;
    execEnv: string;
    execUnits: string;
    deployUnits: string;
    deploymentUnits: string;
    name: string;
    status: string;
    url: string;
    uuid: string;
    vendor: string;
    version: string;
  };
  systemStats: {
    title: string;
    wanThroughput: string;
    lanThroughput: string;
    wifiThroughput: string;
    tx: string;
    rx: string;
  };
  wireless: {
    title: string;
    basicConfig: string;
    advancedConfig: string;
    wpsConfig: string;
    meshNetwork: string;
    settings: string;
    ssid: string;
    password: string;
    mode: string;
    bandwidth: string;
    channel: string;
    autoChannel: string;
    wpsConfiguration: string;
    wpsPushButton: string;
    wpsPushButtonDesc: string;
    wpsPinConnect: string;
    wpsPinConnectDesc: string;
    generatePinCode: string;
    devicePinDesc: string;
    enterPin: string;
    connect: string;
    vapInformation: string;
    band: string;
    authentication: string;
    encryption: string;
    wpsStatus: string;
    easyMesh: string;
    commonSsidConfig: string;
    pushButtonTitle: string;
    pinConnectTitle: string;
    devicePinTitle: string;
    pushButton: string;
    pinCode: string;
    pinCodeOfClient: string;
    noPublicKeys: string;
    extender: string;
    enableWpsConfirm: string;
    enableWpsMessage: string;
    mloSettings: string;
    mloEnable: string;
    mloModeDisabled: string;
    mloMeshDisabled: string;
    meshMloDisabled: string;
    mloMeshWarning: string;
  };
  guest: {
    title: string;
    guestWiFi: string;
    guestLAN: string;
    deviceConnected: string;
    enable: string;
    mloEnable: string;
    ssid: string;
    authentication: string;
    password: string;
    lanIpSetting: string;
    ipAddress: string;
    subnetMask: string;
    dhcpSetting: string;
    enableDhcpServer: string;
    dnsServer: string;
    beginAddress: string;
    endAddress: string;
    leaseTime: string;
    seconds: string;
    hostName: string;
    macAddress: string;
  };
  macfilter: {
    title: string;
    ssid: string;
    aclMode: string;
    disabled: string;
    deny: string;
    allow: string;
    macAddressList: string;
    enterMacAddress: string;
    add: string;
    no: string;
    macAddress: string;
    action: string;
    noMacAddresses: string;
    emptyMacError: string;
    invalidMacFormat: string;
    duplicateMacError: string;
    changeModeTitle: string;
    changeModeMessage: string;
    deleteMacTitle: string;
    deleteMacMessage: string;
    applyChangesTitle: string;
    applyChangesMessage: string;
  };
  wirelessExtender: {
    title: string;
    configuration: string;
    enabled: string;
    role: string;
    repeater: string;
    meshAgent: string;
    connectionStatus: string;
    band: string;
    status: string;
    ssid: string;
    security: string;
    wps: string;
    pinCode: string;
    pairing: string;
    neighborScan: string;
    scan: string;
    scanning: string;
    select: string;
    connectToAP: string;
    radioBand: string;
    wifiMode: string;
    wpaPreshareKey: string;
    connect: string;
    connected: string;
    disconnected: string;
  };
  wanSetup: {
    title: string;
    modeSetup: string;
    modeManagement: string;
    operationMode: string;
    wanMode: string;
    manual: string;
    auto: string;
  };
  wanManagement: {
    addMode: string;
    editMode: string;
    name: string;
    interface: string;
    ipv4Mode: string;
    ipv6Mode: string;
    status: string;
    type: string;
    action: string;
    physicalType: string;
    vlanType: string;
    vlanId: string;
    vlanPriority: string;
    pppoeUsername: string;
    pppoePassword: string;
    staticIpv4: string;
    staticIpv6: string;
    ipv4Address: string;
    ipv6Address: string;
    defaultRouter: string;
    subnetMask: string;
    prefixLength: string;
    dnsServers: string;
    addInterface: string;
    edit: string;
    delete: string;
    detail: string;
    confirmDelete: string;
    enableSensing: string;
    ipv4DnsMode: string;
    ipv6DnsMode: string;
  };
  lanBasic: {
    title: string;
    ipv4Configuration: string;
    deviceConnected: string;
    lanIpSetting: string;
    enable: string;
    ipAddress: string;
    subnetMask: string;
    dhcpv4Setting: string;
    enableDhcpServer: string;
    dnsServer: string;
    beginAddress: string;
    endAddress: string;
    leaseTime: string;
    seconds: string;
    ipAddressReservation: string;
    add: string;
    macAddress: string;
    action: string;
    hostName: string;
    refresh: string;
    apply: string;
    cancel: string;
  };
  serviceControl: {
    title: string;
    management: string;
    addRule: string;
    editRule: string;
    serviceType: string;
    accessDirection: string;
    protocol: string;
    ipRange: string;
    status: string;
    action: string;
    enabled: string;
    disabled: string;
    confirmDelete: string;
  };
  dmz: {
    title: string;
    enable: string;
    ipAddress: string;
    description: string;
  };
  ddns: {
    title: string;
    management: string;
    addService: string;
    editService: string;
    refresh: string;
    no: string;
    provider: string;
    domain: string;
    username: string;
    password: string;
    wanInterface: string;
    status: string;
    lastUpdate: string;
    action: string;
    save: string;
    cancel: string;
    confirmDelete: string;
  };
  ntp: {
    title: string;
    currentTime: string;
    timeZoneSelect: string;
    automaticDaylight: string;
    enableNtp: string;
    ntpServer: string;
    cancel: string;
    apply: string;
    placeholder: string;
  };
  ssh: {
    title: string;
    serverManagement: string;
    publicKeyManagement: string;
    currentSessions: string;
    addServer: string;
    editServer: string;
    id: string;
    interface: string;
    status: string;
    port: string;
    autoDisableServer: string;
    connectionTimeout: string;
    keepAliveMessage: string;
    ipv4Prefix: string;
    ipv6Prefix: string;
    loginWithPassword: string;
    rootLogin: string;
    rootLoginWithPassword: string;
    enabled: string;
    disabled: string;
    action: string;
    enable: string;
    allowPasswordLogin: string;
    allowRootLogin: string;
    allowAllIPv4: string;
    allowAllIPv6: string;
    maxAuthTries: string;
    idleTimeout: string;
    confirmDelete: string;
    comment: string;
    publicKey: string;
    select: string;
    clickToView: string;
    key: string;
    viewKey: string;
    newSshKey: string;
    enterNewSshKey: string;
    confirmDeleteKey: string;
    user: string;
    clientAddress: string;
    clientPort: string;
    serverId: string;
    serverPort: string;
    algorithm : string;
  };
  device: {
    title: string;
    tr069Config: string;
    tr369Config: string;
    enableCWMP: string;
    acsUrl: string;
    connectionRequestUrl: string;
    acsCredentials: string;
    connectionRequestCredentials: string;
    username: string;
    password: string;
    enablePeriodicInform: string;
    periodicInformInterval: string;
    sendInform: string;
    alias: string;
    endpointId: string;
    controllerTopic: string;
    agentTopic: string;
    brokerAddress: string;
    brokerPort: string;
    clientId: string;
    status: string;
    periodicNotify: string;
    keepAliveTime: string;
    connectRetryTime: string;
    connectRetryMaxInterval: string;
    protocolVersion: string;
    transportProtocol: string;
    addController: string;
    editController: string;
    confirmDelete: string;
    action: string;
    agentEndpointId: string;
    maxControllersReached: string;
    controller: string;
  };
  diagnostics: {
    title: string;
    ping: string;
    traceRoute: string;
    dnsLookup: string;
    interface: string;
    protocol: string;
    targetHost: string;
    repeatTimes: string;
    start: string;
    results: string;
    hostAddress: string;
    packetsInfo: string;
    sent: string;
    received: string;
    lost: string;
    minRoundTrip: string;
    maxRoundTrip: string;
    avgRoundTrip: string;
    hop: string;
    host: string;
    address: string;
    rtt: string;
    dnsServer: string;
    status: string;
    answerType: string;
    hostname: string;
    ipAddresses: string;
    responseTime: string;
    dnsServerIp: string;
    processing: string;
    errorState: string;
    errorTimeout: string;
    errorInternal: string;
    errorNetwork: string;
    errorInvalidHost: string;
    errorResolveFailed: string;
  };
  firmware: {
    title: string;
    firmwareBank: string;
    status: string;
    firmwareVersion: string;
    action: string;
    activate: string;
    uploadFirmware: string;
    chooseFile: string;
    noFileSelected: string;
    dragAndDrop: string;
    autoActivate: string;
    updateFirmware: string;
    selectFromComputer: string;
    processing: string;
    upgrading: string;
    activating: string;
    powerOffWarning: string;
    rebootWarning: string;
  };
  reset: {
    title: string;
    restartTitle: string;
    restartDescription: string;
    restartButton: string;
    restartConfirm: string;
    factoryTitle: string;
    factoryDescription: string;
    factoryButton: string;
    factoryConfirm: string;
    countdown: string;
    success: string;
  };
  backup: {
    title: string;
    backupTitle: string;
    backupDescription: string;
    backupButton: string;
    restoreTitle: string;
    restoreDescription: string;
    dragAndDrop: string;
    selectFromComputer: string;
    chooseFile: string;
    noFileSelected: string;
    restoreButton: string;
    processing: string;
  };
  xperienceControl: {
    title: string;
    tagline: string;
    poweredBy: string;
    description: string;
    startTest: string;
    downloadSpeed: string;
    uploadSpeed: string;
    pingInfo: string;
    mbps: string;
    ms: string;
    packetLoss: string;
    minEchoTime: string;
    meanEchoTime: string;
    maxEchoTime: string;
    testFailed: string;
    testing: string;
  };
  thread: {
    title: string;
    status: string;
    configuration: string;
    join: string;
    commissioner: string;
    topology: string;
    borderRouter: string;
    borderAgentId: string;
    mle: string;
    extendedMac: string;
    role: string;
    rloc16: string;
    interface: string;
    firmwareVersion: string;
    dataset: string;
    timestamp: string;
    networkName: string;
    networkKey: string;
    channel: string;
    channelMask: string;
    panId: string;
    extendedPanId: string;
    meshLocalPrefix: string;
    pskc: string;
    securityPolicy: string;
    hexEncodedTlv: string;
    leaderData: string;
    dataVersion: string;
    leaderRouterId: string;
    stableDataVersion: string;
    partitionId: string;
    weighting: string;
    stats: string;
    txBytes: string;
    rxBytes: string;
    txPackets: string;
    rxPackets: string;
    txDropped: string;
    rxDropped: string;
    txErrors: string;
    rxErrors: string;
    availablePans: string;
    scan: string;
    no: string;
    rssi: string;
    lqi: string;
    activeDataset: string;
    pendingDataset: string;
    generateDataset: string;
    activeTimestamp: string;
    pendingTimestamp: string;
    delay: string;
    update: string;
    rotationTime: string;
    autonomousEnrollment: string;
    commercialCommissioning: string;
    externalCommissioning: string;
    nativeCommissioning: string;
    networkKeyProvisioning: string;
    nonCcmRouters: string;
    obtainNetworkKey: string;
    routers: string;
    tobleLink: string;
    credentialType: string;
    credentialValue: string;
    joinButton: string;
    joinSuccess: string;
    joinFailed: string;
    commissionerEnable: string;
    availableJoiner: string;
    eui64OrDiscerner: string;
    pskd: string;
    timeout: string;
    operation: string;
    add: string;
    refresh: string;
    type: string;
  };
  matter: {
    title: string;
    description: string;
    openDashboard: string;
    dashboardDescription: string;
    dashboardPort: string;
  };
  login: {
    title: string;
    username: string;
    password: string;
    submit: string;
    error: string;
  };
  common: {
    save: string;
    cancel: string;
    close: string;
    refresh: string;
    create: string;
    apply: string;
    edit: string;
    delete: string;
    enable: string;
    loading: string;
    yes: string;
    no: string;
    confirm: string;
    generate: string;
    auto: string;
    manual: string;
  },
}